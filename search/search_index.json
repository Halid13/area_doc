{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"frontend/","text":"Documentation Frontend This documentation provides detailed information on the frontend development of the AREA project. It describes the technologies used and provides instructions for installing and deploying the frontend. Technology Used The technology used for frontend development is Vue.js. Vue.js is a progressive JavaScript framework for building user interfaces. It facilitates the creation of reusable components and the management of application state. It is based on HTML, CSS, and JavaScript standards and provides a declarative, component-based programming model that helps you efficiently develop both simple and complex user interfaces. Advantages of Vue.js Ease of Learning: Vue.js is easy to learn and integrate into an existing project, thanks to its simple syntax and clear documentation. It doesn't require a steep learning curve, so developers can get started quickly. Flexibility: Vue.js offers great flexibility in application development. It allows developers to choose between simple file-based development, single-file components, or more advanced components with customized configuration options. Reactivity: Vue.js uses bi-directional data binding and reactive component updating, making it easy to manage states and user interactions. Changes to data are automatically reflected in the user interface, without the need for manual manipulation. Performance: Vue.js is designed for performance. It uses a lightweight virtual rendering engine that optimizes user interface updating and improves overall application performance. Additionally, Vue.js supports server-side rendering (SSR) for even better performance. Why Vue.js and not other frameworks? Vue.js vs React: Vue.js and React are similar in their component-based development approach and responsiveness. However, Vue.js offers a smoother learning curve than React and natively includes features such as bidirectional data binding and routing. Vue.js vs Angular: Vue.js focuses on simplicity and ease of use, while Angular offers a complete solution for the development of complex applications. Vue.js is generally considered lighter and easier to integrate into existing projects, while Angular offers features such as dependency injection and advanced state management. Vue.js vs Ember: Vue.js and Ember share similarities in their conventional approach and support for component-based development. However, Vue.js is generally considered simpler and easier to learn and integrate. Vue.js Framework Installation Steps Here are the steps to install Vue.js: Step 1: Installation of Node.js Vue.js requires Node.js, so the first step is to install Node.js on your machine. Visit the official Node.js website (https://nodejs.org) and download the latest stable version for your operating system. Follow the installation instructions provided by the Node.js installer. Step 2: Installation of Vue CLI Vue CLI is a command-line tool that makes it easy to create Vue.js projects. Open your terminal or command prompt and run the following command to install Vue CLI globally on your system: npm install -g @vue/cli Step 3: Creating a new Vue.js project Once Vue CLI is installed, you can create a new Vue.js project using the following command: vue create project-name Replace \"project-name\" with the name you wish to give to your project. You'll be guided through an interactive wizard to configure your Vue.js project. You can choose default options or customize the configuration to suit your needs. Step 4: Execution of the project Once the project has been created, access the project directory using the command cd project-name . Then run the following command to start the development server: npm run serve You will see messages in the console indicating that the development server is running. You can access your application in your browser at the URL indicated (usually http://localhost:8080). For more information and detailed documentation on Vue.js, please refer to the official Vue.js website and documentation: https://vuejs.org/","title":"FrontEnd"},{"location":"frontend/#documentation-frontend","text":"This documentation provides detailed information on the frontend development of the AREA project. It describes the technologies used and provides instructions for installing and deploying the frontend.","title":"Documentation Frontend"},{"location":"frontend/#technology-used","text":"The technology used for frontend development is Vue.js. Vue.js is a progressive JavaScript framework for building user interfaces. It facilitates the creation of reusable components and the management of application state. It is based on HTML, CSS, and JavaScript standards and provides a declarative, component-based programming model that helps you efficiently develop both simple and complex user interfaces.","title":"Technology Used"},{"location":"frontend/#advantages-of-vuejs","text":"Ease of Learning: Vue.js is easy to learn and integrate into an existing project, thanks to its simple syntax and clear documentation. It doesn't require a steep learning curve, so developers can get started quickly. Flexibility: Vue.js offers great flexibility in application development. It allows developers to choose between simple file-based development, single-file components, or more advanced components with customized configuration options. Reactivity: Vue.js uses bi-directional data binding and reactive component updating, making it easy to manage states and user interactions. Changes to data are automatically reflected in the user interface, without the need for manual manipulation. Performance: Vue.js is designed for performance. It uses a lightweight virtual rendering engine that optimizes user interface updating and improves overall application performance. Additionally, Vue.js supports server-side rendering (SSR) for even better performance.","title":"Advantages of Vue.js"},{"location":"frontend/#why-vuejs-and-not-other-frameworks","text":"Vue.js vs React: Vue.js and React are similar in their component-based development approach and responsiveness. However, Vue.js offers a smoother learning curve than React and natively includes features such as bidirectional data binding and routing. Vue.js vs Angular: Vue.js focuses on simplicity and ease of use, while Angular offers a complete solution for the development of complex applications. Vue.js is generally considered lighter and easier to integrate into existing projects, while Angular offers features such as dependency injection and advanced state management. Vue.js vs Ember: Vue.js and Ember share similarities in their conventional approach and support for component-based development. However, Vue.js is generally considered simpler and easier to learn and integrate.","title":"Why Vue.js and not other frameworks?"},{"location":"frontend/#vuejs-framework-installation-steps","text":"Here are the steps to install Vue.js: Step 1: Installation of Node.js Vue.js requires Node.js, so the first step is to install Node.js on your machine. Visit the official Node.js website (https://nodejs.org) and download the latest stable version for your operating system. Follow the installation instructions provided by the Node.js installer. Step 2: Installation of Vue CLI Vue CLI is a command-line tool that makes it easy to create Vue.js projects. Open your terminal or command prompt and run the following command to install Vue CLI globally on your system: npm install -g @vue/cli Step 3: Creating a new Vue.js project Once Vue CLI is installed, you can create a new Vue.js project using the following command: vue create project-name Replace \"project-name\" with the name you wish to give to your project. You'll be guided through an interactive wizard to configure your Vue.js project. You can choose default options or customize the configuration to suit your needs. Step 4: Execution of the project Once the project has been created, access the project directory using the command cd project-name . Then run the following command to start the development server: npm run serve You will see messages in the console indicating that the development server is running. You can access your application in your browser at the URL indicated (usually http://localhost:8080). For more information and detailed documentation on Vue.js, please refer to the official Vue.js website and documentation: https://vuejs.org/","title":"Vue.js Framework Installation Steps"},{"location":"technicaldoc/","text":"Area Technical Documentation Authors: Jaurio DANSOU, Leobasthene LIMA, Mohamed ONIFADE, D\u00e9o-Gratias PATINVOH, Ishola AREMOU, Zaidane KODJOGBE I. Project Overview This is the technical documentation that provides a detailed explanation of the technical aspects and code of the project. For instructions on how to use the application, please refer to the provided user's guide. The AREA project aims to create a software suite that functions similarly to IFTTT and/or Zapier. The suite is divided into three parts: Server: Implements all the features. Web Application: Allows users to access the application from a browser. Mobile Application: Allows users to access the application from a mobile phone. The project utilizes the following languages and technologies: Server: Node.js with Express and MongoDB. Web Application: Vue.js. Mobile Application: Flutter. II. Libraries Used The server is built with MongoDB as the database manager and utilizes Passport.js for managing user authentication on different services of the application. III. Project Structure The project is structured into three directories, each containing the code for the corresponding part: Frontweb, Mobile, and Server. The project is built using Docker, which will be further detailed in the next section. IV. APIs Used The project currently utilizes the following APIs: OpenWeather API (https://openweathermap.org/api) Facebook API (https://developers.facebook.com/docs/graph-api) V. Database Structure The project uses MongoDB as the database manager, integrated with Node.js and Express to handle interactions between the front-end server and the API server. Prisma is used to manage interactions between the application and the database. The database consists of several models, including: User (model for users using Google OAuth2): id: Unique ID (type: String) googleId: Unique ID for Google account (type: String) name: User name (type: String) email: Email address (type: String) LogInData (model for users using normal authentication): id: Unique ID (type: String) name: User name (type: String) email: Email address (type: String) password: Unique password for the user (type: String) VI. Server Endpoints The server provides the following endpoints: GET: /start-auth - Endpoint to initiate the authorization process. GET: /callback - Redirection endpoint after authorization. POST: /pub - Endpoint to allow users to post messages on Facebook. GET: /auth/google - Google authentication endpoint. GET: /auth/google/callback - URL redirection for Google callback. GET: /auth/google/failure - URL redirection for authentication failure. GET: /auth/protected - URL redirection for successful authentication. GET: /auth/logout - URL redirection for logging out. POST: /signup - Endpoint for the signup page. POST: /login - Endpoint for the login page. VII. Project Build The project is built using Docker. The project structure separates the back-end, web, and mobile servers, with a Dockerfile in each folder and a docker-compose.yml file at the root. The docker-compose.yml file calls the Dockerfile in each source folder (/server/, /frontweb/, & /mobile/) to build the entire project and launch the servers. Front Server: localhost:8081 Back Server: localhost:8080 Mobile APK Download: localhost:8081/client.apk","title":"Technical doc"},{"location":"technicaldoc/#area-technical-documentation","text":"Authors: Jaurio DANSOU, Leobasthene LIMA, Mohamed ONIFADE, D\u00e9o-Gratias PATINVOH, Ishola AREMOU, Zaidane KODJOGBE","title":"Area Technical Documentation"},{"location":"technicaldoc/#i-project-overview","text":"This is the technical documentation that provides a detailed explanation of the technical aspects and code of the project. For instructions on how to use the application, please refer to the provided user's guide. The AREA project aims to create a software suite that functions similarly to IFTTT and/or Zapier. The suite is divided into three parts: Server: Implements all the features. Web Application: Allows users to access the application from a browser. Mobile Application: Allows users to access the application from a mobile phone. The project utilizes the following languages and technologies: Server: Node.js with Express and MongoDB. Web Application: Vue.js. Mobile Application: Flutter.","title":"I. Project Overview"},{"location":"technicaldoc/#ii-libraries-used","text":"The server is built with MongoDB as the database manager and utilizes Passport.js for managing user authentication on different services of the application.","title":"II. Libraries Used"},{"location":"technicaldoc/#iii-project-structure","text":"The project is structured into three directories, each containing the code for the corresponding part: Frontweb, Mobile, and Server. The project is built using Docker, which will be further detailed in the next section.","title":"III. Project Structure"},{"location":"technicaldoc/#iv-apis-used","text":"The project currently utilizes the following APIs: OpenWeather API (https://openweathermap.org/api) Facebook API (https://developers.facebook.com/docs/graph-api)","title":"IV. APIs Used"},{"location":"technicaldoc/#v-database-structure","text":"The project uses MongoDB as the database manager, integrated with Node.js and Express to handle interactions between the front-end server and the API server. Prisma is used to manage interactions between the application and the database. The database consists of several models, including: User (model for users using Google OAuth2): id: Unique ID (type: String) googleId: Unique ID for Google account (type: String) name: User name (type: String) email: Email address (type: String) LogInData (model for users using normal authentication): id: Unique ID (type: String) name: User name (type: String) email: Email address (type: String) password: Unique password for the user (type: String)","title":"V. Database Structure"},{"location":"technicaldoc/#vi-server-endpoints","text":"The server provides the following endpoints: GET: /start-auth - Endpoint to initiate the authorization process. GET: /callback - Redirection endpoint after authorization. POST: /pub - Endpoint to allow users to post messages on Facebook. GET: /auth/google - Google authentication endpoint. GET: /auth/google/callback - URL redirection for Google callback. GET: /auth/google/failure - URL redirection for authentication failure. GET: /auth/protected - URL redirection for successful authentication. GET: /auth/logout - URL redirection for logging out. POST: /signup - Endpoint for the signup page. POST: /login - Endpoint for the login page.","title":"VI. Server Endpoints"},{"location":"technicaldoc/#vii-project-build","text":"The project is built using Docker. The project structure separates the back-end, web, and mobile servers, with a Dockerfile in each folder and a docker-compose.yml file at the root. The docker-compose.yml file calls the Dockerfile in each source folder (/server/, /frontweb/, & /mobile/) to build the entire project and launch the servers. Front Server: localhost:8081 Back Server: localhost:8080 Mobile APK Download: localhost:8081/client.apk","title":"VII. Project Build"},{"location":"userguide/","text":"Area User's Guide Authors: Jaurio DANSOU, Leobasthene LIMA, Mohamed ONIFADE, D\u00e9o-Gratias PATINVOH, Ishola AREMOU, Zaidane KODJOGBE I. Introduction The purpose of this document is to explain how to use the different functionalities of the Area application. This guide is designed for both the web and mobile versions of the application. Through this document, you will learn how to properly use our AREA App. II. Register & Login A. Register to App Area To access the Area application, you will first need to create an account using the \"Sign-up\" form on the landing page of the app. Alternatively, you can use an existing Google account to skip this step. To create your account, you will be required to provide an email, a username, and a password. Please note that this information can be modified later in the application. B. Login to App Area There are two ways to log in to the application. You can either log in using your credentials if you have created an account, or you can log in with your Google account. If you choose the second option, you will be automatically reconnected each time you visit the login page unless you manually disconnect from the application. III. Application Overview The Area App consists of the following pages: Home Page (web only): This is the landing page of the application. Dashboard Page: Here, you can manage your created AREAs and create new ones. Profile Page: This page allows you to edit your personal information. IV. Profile Page A. Viewing Personal Information On the Profile page, you can view your personal information, including your username, email, and password. This information is displayed using the corresponding form. V. Create a New AREA [This section is incomplete and requires further information.] For more detailed instructions on creating a new AREA, please refer to the appropriate documentation or user guide specific to the Area application. Note: The remaining sections of the user guide are missing, and further information is required to complete the document.","title":"User's Guide"},{"location":"userguide/#area-users-guide","text":"Authors: Jaurio DANSOU, Leobasthene LIMA, Mohamed ONIFADE, D\u00e9o-Gratias PATINVOH, Ishola AREMOU, Zaidane KODJOGBE","title":"Area User's Guide"},{"location":"userguide/#i-introduction","text":"The purpose of this document is to explain how to use the different functionalities of the Area application. This guide is designed for both the web and mobile versions of the application. Through this document, you will learn how to properly use our AREA App.","title":"I. Introduction"},{"location":"userguide/#ii-register-login","text":"","title":"II. Register &amp; Login"},{"location":"userguide/#a-register-to-app-area","text":"To access the Area application, you will first need to create an account using the \"Sign-up\" form on the landing page of the app. Alternatively, you can use an existing Google account to skip this step. To create your account, you will be required to provide an email, a username, and a password. Please note that this information can be modified later in the application.","title":"A. Register to App Area"},{"location":"userguide/#b-login-to-app-area","text":"There are two ways to log in to the application. You can either log in using your credentials if you have created an account, or you can log in with your Google account. If you choose the second option, you will be automatically reconnected each time you visit the login page unless you manually disconnect from the application.","title":"B. Login to App Area"},{"location":"userguide/#iii-application-overview","text":"The Area App consists of the following pages: Home Page (web only): This is the landing page of the application. Dashboard Page: Here, you can manage your created AREAs and create new ones. Profile Page: This page allows you to edit your personal information.","title":"III. Application Overview"},{"location":"userguide/#iv-profile-page","text":"","title":"IV. Profile Page"},{"location":"userguide/#a-viewing-personal-information","text":"On the Profile page, you can view your personal information, including your username, email, and password. This information is displayed using the corresponding form.","title":"A. Viewing Personal Information"},{"location":"userguide/#v-create-a-new-area","text":"[This section is incomplete and requires further information.] For more detailed instructions on creating a new AREA, please refer to the appropriate documentation or user guide specific to the Area application. Note: The remaining sections of the user guide are missing, and further information is required to complete the document.","title":"V. Create a New AREA"}]}